[ {
  "active" : true,
  "code" : "mv-ticket-management",
  "description" : "Trouble ticket management system",
  "license" : "GPL",
  "script" : {
    "active" : true,
    "code" : "org.meveo.ticket_management.TicketManagementInstallScript",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.ticket_management;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.Client;\r\nimport javax.ws.rs.client.ClientBuilder;\r\nimport javax.ws.rs.client.WebTarget;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.service.config.impl.MavenConfigurationService;\r\nimport org.meveo.service.script.module.ModuleScript;\r\n\r\npublic class TicketManagementInstallScript extends ModuleScript {\r\n    \r\n    static final String REPO_NAME=\"smichea\";\r\n    static final String GROUP_ID=\"com.assembla\";\r\n    static final String ARTIFACT_ID=\"assembla-api\";\r\n    static final String VERSION=\"0.1\";\r\n    static final String CLASSIFIER=\"\";\r\n    static final String FILENAME = \"assembla-api-0.1.jar\";\r\n\r\n    MavenConfigurationService mavenConfigurationService = getCDIBean(MavenConfigurationService.class);\r\n\r\n    protected InputStream  downloadJar(){\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget webTarget = client.target(\"https://github.com/\"+REPO_NAME+\"/\"+ARTIFACT_ID+\"/releases/download/v\"+VERSION+\"/\"+FILENAME);\r\n        Response response = webTarget.request().get();\r\n        if(response.getStatus()==302){\r\n            String location = response.getHeaderString(\"Location\");\r\n            response = client.target(location).request().get();\r\n        }\r\n        if(response.getStatus()==200){\r\n            InputStream in = response.readEntity(InputStream.class);\r\n            return in;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected void uploadMavenArtifact(InputStream inputStream, File file) throws BusinessException{\r\n\t\ttry {\r\n\t\t\tOutputStream outputStream = new FileOutputStream(file);\r\n\t\t\tint read = 0;\r\n\t\t\tbyte[] data = new byte[1024];\r\n\r\n\t\t\twhile ((read = inputStream.read(data)) != -1) {\r\n\t\t\t\toutputStream.write(data, 0, read);\r\n\t\t\t}\r\n\r\n\t\t\tinputStream.close();\r\n\t\t\toutputStream.flush();\r\n\t\t\toutputStream.close();\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow new BusinessException(\"Error uploading file: \" + FILENAME + \". \" + e.getMessage());\r\n\t\t}\r\n\t}\r\n    \r\n    protected boolean artifactExist(){\r\n        boolean result=false;\r\n        return result;\r\n    }\r\n\r\n    protected void updloadArtifact() throws BusinessException{\r\n        String filePath = mavenConfigurationService.createDirectory(GROUP_ID, ARTIFACT_ID, VERSION, CLASSIFIER);\r\n\t\tfilePath = filePath + File.separator + mavenConfigurationService.buildArtifactName(ARTIFACT_ID, VERSION, CLASSIFIER);\r\n        File file =new File(filePath);\r\n        if(!file.exists()){\r\n            InputStream in = downloadJar();\r\n            uploadMavenArtifact(in,file);\r\n        }\r\n    }\r\n\r\n    public void preInstallModule(Map<String, Object> methodContext) throws BusinessException {\r\n        updloadArtifact();\r\n    }\r\n\r\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\r\n        updloadArtifact();\r\n    }\r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  },
  "currentVersion" : "0.4.0",
  "meveoVersionBase" : "6.14.0",
  "transient" : true,
  "codeOnly" : false,
  "inDraft" : true,
  "moduleItems" : [ {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "de50d28c-ca64-4c40-a881-e7dce5016f06",
      "cetCode" : "CREDENTIAL",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "DOMAIN",
          "stringValue" : "github.com",
          "empty" : false
        }, {
          "code" : "LAST_CONNECTION",
          "empty" : true
        }, {
          "code" : "TOKEN_EXPIRY",
          "empty" : true
        }, {
          "code" : "AUTHENTICATION_TYPE",
          "stringValue" : "OAUTH2",
          "empty" : false
        }, {
          "code" : "PRIVATE_KEY",
          "empty" : true
        }, {
          "code" : "PUBLIC_KEY",
          "empty" : true
        }, {
          "code" : "HEADER_VALUE",
          "empty" : true
        }, {
          "code" : "REFRESH_TOKEN",
          "empty" : true
        }, {
          "code" : "HEADER_KEY",
          "empty" : true
        }, {
          "code" : "STATUS",
          "stringValue" : "ACTIVE",
          "empty" : false
        }, {
          "code" : "PASSWORD",
          "empty" : true
        }, {
          "code" : "USERNAME",
          "stringValue" : "smichea",
          "empty" : false
        }, {
          "code" : "TOKEN",
          "stringValue" : "1aeeeeb1270688c254fb2fdcc6b16f438f78afe6",
          "empty" : false
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "717d2810-9da9-4bd7-bdf8-0d62e1f3cc8c",
      "cetCode" : "MV_TCKTMNG_PROJECT",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "name",
          "stringValue" : "crawler-engine",
          "empty" : false
        }, {
          "code" : "description",
          "stringValue" : "Crawler engine",
          "empty" : false
        }, {
          "code" : "remoteSpaces",
          "mapValue" : {
            "assembla.com" : {
              "value" : "webdrone-iep-kbstudio",
              "empty" : false
            },
            "github.com" : {
              "value" : "webdrone-fr/crawler-engine",
              "empty" : false
            }
          },
          "empty" : true
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "MV_TCKTMNG_TICKET",
      "name" : "Ticket",
      "description" : "Ticket describing an issue, a feature, a task...",
      "customEntityCategoryCode" : "PROJECTS",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "assignees",
        "description" : "Assignees",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : true,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "closedAt",
        "description" : "Closed date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:9",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : true,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "comments",
        "description" : "Comments",
        "fieldType" : "CHILD_ENTITY",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - MV_TCKTMNG_COMMENT",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:11",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "MV_TCKTMNG_COMMENT",
        "matrixColumns" : [ ],
        "childEntityFieldsForSummary" : [ "createdAt", "creator", "description", "updatedAt" ]
      }, {
        "code" : "createdAt",
        "description" : "Creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:7",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "creator",
        "description" : "Creator",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : true,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "description",
        "description" : "Description",
        "fieldType" : "LONG_TEXT",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "milestone",
        "description" : "Milestone",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - MV_TCKTMNG_MILESTONE",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:10",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "MV_TCKTMNG_MILESTONE",
        "matrixColumns" : [ ]
      }, {
        "code" : "number",
        "description" : "Number",
        "fieldType" : "LONG",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:1",
        "identifier" : true,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "project",
        "description" : "Project",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - MV_TCKTMNG_PROJECT",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "MV_TCKTMNG_PROJECT",
        "matrixColumns" : [ ]
      }, {
        "code" : "remoteId",
        "description" : "Remote Id",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:12",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "tags",
        "description" : "Tags",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "LIST",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "title",
        "description" : "Title",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 250,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : true,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "updatedAt",
        "description" : "last update",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_TICKET",
        "appliesTo" : "CE_MV_TCKTMNG_TICKET",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Ticket:0;field:8",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.ticket_management.RetrieveRemoteMilestonesScript",
      "description" : "retrieve milestones from the remote space of a project",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.ticket_management;\r\n\r\nimport java.util.Map;\r\nimport java.time.ZoneOffset;\r\nimport java.util.List;\r\nimport org.meveo.service.script.Script;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.persistence.CEIUtils;\r\n\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_MILESTONE;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_PROJECT;\r\n\r\nimport org.meveo.model.customEntities.CREDENTIAL;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\n\r\nimport com.assembla.Milestone;\r\nimport com.assembla.client.AssemblaAPI;\r\nimport com.assembla.client.AssemblaResource;\r\nimport com.assembla.client.PagedIterator;\r\n\r\n\r\npublic class RetrieveRemoteMilestonesScript extends Script {\r\n\r\n  private static final Logger log = LoggerFactory.getLogger(RetrieveRemoteMilestonesScript.class);\r\n    \r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\t\r\n\r\n  \tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n  \r\n    \r\n    private CREDENTIAL getCredential(String domain){\r\n      List<CREDENTIAL> matchingCredentials = crossStorageApi.find(repositoryService.findDefaultRepository(), CREDENTIAL.class)\r\n                .by(\"DOMAIN\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchingCredentials.size()>0){\r\n        return matchingCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    private MV_TCKTMNG_MILESTONE getMilestone(String remoteId){\r\n      MV_TCKTMNG_MILESTONE result=null;\r\n      List<MV_TCKTMNG_MILESTONE> matchingMilestones = crossStorageApi.find(repositoryService.findDefaultRepository(), MV_TCKTMNG_MILESTONE.class)\r\n                .by(\"remoteId\", remoteId)\r\n\t\t\t\t.getResults();\r\n      if(matchingMilestones.size()>0){\r\n        result = matchingMilestones.get(0);\r\n      } else {\r\n        result =  new MV_TCKTMNG_MILESTONE();\r\n        result.setRemoteId(remoteId);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    public void retrieveAssemblaMilsteones(MV_TCKTMNG_PROJECT project)  throws BusinessException {\r\n      log.debug(\"retrieveAssemblaTickets for project {}\",project.getName());\r\n      CREDENTIAL assemblaCredential = getCredential(\"assembla.com\");\r\n      if(assemblaCredential==null){\r\n        throw new BusinessException(\"cannot find any Credential for assembla.com, please create one with username= api-key and header-value=api-secret.\");\r\n      }\r\n      try {\r\n        AssemblaResource api  = AssemblaAPI.create(assemblaCredential.getUSERNAME(), assemblaCredential.getHEADER_VALUE());\r\n        PagedIterator<Milestone> pgIt=api.milestones(project.getRemoteSpaces().get(\"assembla.com\")).getAll();\r\n        \r\n        pgIt.forEach(milestones->{\r\n          for(Milestone assemblaMilestone:milestones){\r\n            log.debug(\"milestone  {}\",assemblaMilestone);\r\n            MV_TCKTMNG_MILESTONE milestone = getMilestone(assemblaMilestone.getId());\r\n            \r\n            log.debug(\"milestone title: {}\",assemblaMilestone.getTitle());\r\n            milestone.setTitle(assemblaMilestone.getTitle());\r\n            milestone.setDescription(assemblaMilestone.getDescription());\r\n            milestone.setProject(project);\r\n            if(assemblaMilestone.getCreatedAt()!=null){\r\n              milestone.setStartDate(assemblaMilestone.getCreatedAt().toInstant());\r\n            }\r\n            if(assemblaMilestone.getDueDate()!=null){\r\n              milestone.setDueDate(assemblaMilestone.getDueDate().atStartOfDay().toInstant(ZoneOffset.UTC));\r\n            }\r\n            if(assemblaMilestone.getCompletedDate()!=null){\r\n              milestone.setEndDate(assemblaMilestone.getCompletedDate().atStartOfDay().toInstant(ZoneOffset.UTC));\r\n            }\r\n            try{\r\n            crossStorageApi.createOrUpdate(repositoryService.findDefaultRepository(), CEIUtils.pojoToCei(milestone));\r\n            } catch (Exception e){\r\n              throw new RuntimeException(\"Exception while persisting milestone\",e);\r\n            }\r\n          };\r\n        });\r\n      } catch (Exception e){\r\n        throw new BusinessException(\"Exception while retrieving assembla tickets\",e);\r\n      }\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String,Object> params)  throws BusinessException {\r\n        CustomEntityInstance cei = (CustomEntityInstance)params.get(\"CONTEXT_ENTITY\");\r\n        MV_TCKTMNG_PROJECT project = CEIUtils.ceiToPojo(cei, MV_TCKTMNG_PROJECT.class);\r\n        for(String domain:project.getRemoteSpaces().keySet()){\r\n          if(\"assembla.com\".equals(domain)){\r\n            retrieveAssemblaMilsteones(project);\r\n          }\r\n        }\r\n      \tlog.info(\"project:{}\",project);\r\n    }\r\n\r\n\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "c99fc933-fb73-45c4-823e-40c533a9e441",
      "cetCode" : "CREDENTIAL",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "DOMAIN",
          "stringValue" : "assembla.com",
          "empty" : false
        }, {
          "code" : "LAST_CONNECTION",
          "empty" : true
        }, {
          "code" : "TOKEN_EXPIRY",
          "empty" : true
        }, {
          "code" : "AUTHENTICATION_TYPE",
          "stringValue" : "HEADER",
          "empty" : false
        }, {
          "code" : "PRIVATE_KEY",
          "empty" : true
        }, {
          "code" : "PUBLIC_KEY",
          "empty" : true
        }, {
          "code" : "HEADER_VALUE",
          "stringValue" : "8dc11ab8f823874d1faf2e96b117c280e03ec4ee",
          "empty" : false
        }, {
          "code" : "REFRESH_TOKEN",
          "empty" : true
        }, {
          "code" : "HEADER_KEY",
          "stringValue" : "X-API-KEY",
          "empty" : false
        }, {
          "code" : "STATUS",
          "stringValue" : "ACTIVE",
          "empty" : false
        }, {
          "code" : "PASSWORD",
          "empty" : true
        }, {
          "code" : "USERNAME",
          "stringValue" : "252644506584976468dc",
          "empty" : false
        }, {
          "code" : "TOKEN",
          "empty" : true
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "746e0e89-dbb4-4e65-a5b8-1dadcdde7c73",
      "cetCode" : "MV_TCKTMNG_TICKET",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "creator",
          "stringValue" : "aE3dxMA4Or54kudmr6bg7m",
          "empty" : false
        }, {
          "code" : "comments",
          "listValue" : [ {
            "value" : {
              "createdAt" : 1.601038283E9,
              "creator" : "aE3dxMA4Or54kudmr6bg7m",
              "description" : "[DOC] Refs #4096 - BatchNode\n\nCommitted to: webdrone-iep-kbstudio.InvestigationCore:3.0\nCommit: [[r:2:1961e3f84c3c0c16c3cd2e7d4913e124a4774c4e|webdrone-iep-kbstudio.InvestigationCore:1961e3f84c]]",
              "updatedAt" : 1.601038284E9
            },
            "empty" : false
          }, {
            "value" : {
              "createdAt" : 1.600855089E9,
              "creator" : "aE3dxMA4Or54kudmr6bg7m",
              "description" : "[TEST] Refs #4096 - BatchNode\n\nCommitted to: webdrone-iep-kbstudio.crawler-engine:develop\nCommit: [[r:3:f61403880a1b75e32e752d128faebcc96eee6e3c|webdrone-iep-kbstudio.crawler-engine:f61403880a]]",
              "updatedAt" : 1.600855089E9
            },
            "empty" : false
          }, {
            "value" : {
              "createdAt" : 1.600790239E9,
              "creator" : "aE3dxMA4Or54kudmr6bg7m",
              "description" : "Refs #4096 : BatchNode - fix ExecutionContext\n\nCommitted to: webdrone-iep-kbstudio.crawler-engine:develop\nCommit: [[r:3:e329065bb64d5252a7f85c6b5c525fa49b0fc4f7|webdrone-iep-kbstudio.crawler-engine:e329065bb6]]",
              "updatedAt" : 1.600790239E9
            },
            "empty" : false
          }, {
            "value" : {
              "createdAt" : 1.600784411E9,
              "creator" : "aE3dxMA4Or54kudmr6bg7m",
              "description" : "Refs #4096 : BatchNode\n\nModify matching rules to allow some patterns starting with \"cn.search\"\n\nCommitted to: webdrone-iep-kbstudio.InvestigationCore:3.0\nCommit: [[r:2:33e4e67e1ae1b9bacddddd34ec1a35ce0583395e|webdrone-iep-kbstudio.InvestigationCore:33e4e67e1a]]",
              "updatedAt" : 1.600784411E9
            },
            "empty" : false
          }, {
            "value" : {
              "createdAt" : 1.600784293E9,
              "creator" : "aE3dxMA4Or54kudmr6bg7m",
              "description" : "Refs #4096 : BatchNode\n\n- Create BatchNode & BatchNodeExecutor\n- Add functions ExecutionContext#addOnSetListener and #removeOnSetListener\n\nCommitted to: webdrone-iep-kbstudio.crawler-engine:develop\nCommit: [[r:3:7696faa02932199627137a7e13b8a4776d675aa5|webdrone-iep-kbstudio.crawler-engine:7696faa029]]",
              "updatedAt" : 1.600784294E9
            },
            "empty" : false
          }, {
            "value" : {
              "createdAt" : 1.584548549E9,
              "creator" : "a7NqWcrGGr54kCacwqjQYw",
              "description" : "@ClémentWebdrone - please reword this ticket\nI don't think it's a Detail crawl but  Batch + Detail crawl\nThe Connector will have to call thefollowing methods :\nfr.webdrone.connectors.orchestrator.tasks.SearchQueryTask.updateStatsAfterBatch    updateStatsFromDocumentItemExecution updateStatsFromDocumentItemTheoreticExecution   setCurrentNbRemainingItemToExecute  addChildTaskOrGet setFinished\n\nThis process has to handle the first batch too",
              "updatedAt" : 1.584548549E9
            },
            "empty" : false
          } ],
          "empty" : false
        }, {
          "code" : "assignees",
          "listValue" : [ {
            "value" : "a7NqWcrGGr54kCacwqjQYw",
            "empty" : false
          } ],
          "empty" : false
        }, {
          "code" : "description",
          "stringValue" : "The BatchNode is where a batch is initialized. It initializes objects where information about how to restart query, the number of remaining results, etc, are stored.\n\nWhen the batch node is initialized, a timer is started and a new task is created (SearchQueryTask.addChildTaskOrGet). The following variables are injected into the context : \n- cn.search.nbRemainingItemsToCrawl : the number of remaining items to crawl for the search (SearchQueryTask.nbRemainingItemsToCrawl)\n- cn.search.isFinished : whether the task is finished (will call SearchQueryTask.setFinished) when set to true\n- cn.search.restartInfos : map containing information on how to restart the query from where it has been stopped\n\nIf an error occurs during the batch node, we will save informations about the error and stop the connector execution\n\nWhen all the children of the batch node are executed, we save the stats (SearchQueryTask.updateStatsAfterBatch)",
          "empty" : false
        }, {
          "code" : "project",
          "entityReferenceValue" : {
            "classname" : null,
            "code" : null,
            "id" : null,
            "empty" : true
          },
          "empty" : true
        }, {
          "code" : "title",
          "stringValue" : "BatchNode",
          "empty" : false
        }, {
          "code" : "remoteId",
          "stringValue" : "4096 - 231621011",
          "empty" : false
        }, {
          "code" : "tags",
          "listValue" : [ {
            "value" : "NORMAL",
            "empty" : false
          }, {
            "value" : "OPEN",
            "empty" : false
          }, {
            "value" : "To test",
            "empty" : false
          } ],
          "empty" : false
        }, {
          "code" : "createdAt",
          "dateValue" : 1582799235,
          "empty" : false
        }, {
          "code" : "number",
          "empty" : true
        }, {
          "code" : "milestone",
          "entityReferenceValue" : {
            "classname" : null,
            "code" : null,
            "id" : null,
            "empty" : true
          },
          "empty" : true
        }, {
          "code" : "closedAt",
          "empty" : true
        }, {
          "code" : "updatedAt",
          "dateValue" : 1601038361,
          "empty" : false
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "MV_TCKTMNG_MILESTONE",
      "name" : "Milestones",
      "description" : "Milestones",
      "customEntityCategoryCode" : "PROJECTS",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "description",
        "description" : "Description",
        "fieldType" : "LONG_TEXT",
        "accountLevel" : "CE_MV_TCKTMNG_MILESTONE",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Milestones:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "dueDate",
        "description" : "Due date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_MILESTONE",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Milestones:0;field:4",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "endDate",
        "description" : "End date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_MILESTONE",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Milestones:0;field:5",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "project",
        "description" : "Project",
        "fieldType" : "ENTITY",
        "accountLevel" : "CE_MV_TCKTMNG_MILESTONE",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "entityClazz" : "org.meveo.model.customEntities.CustomEntityTemplate - MV_TCKTMNG_PROJECT",
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Milestones:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "entityClazzCetCode" : "MV_TCKTMNG_PROJECT",
        "matrixColumns" : [ ]
      }, {
        "code" : "remoteId",
        "description" : "Remote Id",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_MILESTONE",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Milestones:0;field:6",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "startDate",
        "description" : "Start date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_MILESTONE",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Milestones:0;field:3",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "title",
        "description" : "Title",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_MILESTONE",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Milestones:0;field:1",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "RETRIEVE_REMOTE_MILESTONE_TICKETS",
        "description" : "retreive remote tickets",
        "appliesTo" : "CE_MV_TCKTMNG_MILESTONE",
        "label" : "Retrieve tickets",
        "script" : "org.meveo.ticket_management.RetrieveRemoteTicketsScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "9db4668e-a89e-4ced-bede-0ba6b5790099",
      "cetCode" : "MV_TCKTMNG_MILESTONE",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "endDate",
          "empty" : true
        }, {
          "code" : "dueDate",
          "dateValue" :  1588896000,
          "empty" : false
        }, {
          "code" : "description",
          "stringValue" : "The goal is to \r\n- collect all costs when performing the searchs\r\n- priorize queries (start/stop when necessary)\r\n- add option in KB-Studio to identify url of documents, failures, params needed to restart the search\r\n\r\nTasks related to persistence of connector's state and restart have been postponed to next milestone",
          "empty" : false
        }, {
          "code" : "project",
          "entityReferenceValue" : {
            "classname" : null,
            "code" : null,
            "id" : null,
            "empty" : true
          },
          "empty" : true
        }, {
          "code" : "title",
          "stringValue" : "Investigation Core 3.0-alpha.5",
          "empty" : false
        }, {
          "code" : "startDate",
          "dateValue" : 1582206090,
          "empty" : false
        }, {
          "code" : "remoteId",
          "stringValue" : "12972280",
          "empty" : false
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "MV_TCKTMNG_COMMENT",
      "name" : "Comment",
      "description" : "Comment",
      "customEntityCategoryCode" : "PROJECTS",
      "availableStorages" : [ ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "createdAt",
        "description" : "Creation date",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_COMMENT",
        "appliesTo" : "CE_MV_TCKTMNG_COMMENT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Comments:0;field:2",
        "identifier" : false,
        "storages" : [ ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "creator",
        "description" : "Creator",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_COMMENT",
        "appliesTo" : "CE_MV_TCKTMNG_COMMENT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : false,
        "hideOnNew" : false,
        "maxValue" : 50,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Comments:0;field:1",
        "identifier" : false,
        "storages" : [ ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "description",
        "description" : "Description",
        "fieldType" : "LONG_TEXT",
        "accountLevel" : "CE_MV_TCKTMNG_COMMENT",
        "appliesTo" : "CE_MV_TCKTMNG_COMMENT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Comments:0;field:0",
        "identifier" : false,
        "storages" : [ ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "updatedAt",
        "description" : "Last update",
        "fieldType" : "DATE",
        "accountLevel" : "CE_MV_TCKTMNG_COMMENT",
        "appliesTo" : "CE_MV_TCKTMNG_COMMENT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Comments:0;field:3",
        "identifier" : false,
        "storages" : [ ],
        "samples" : [ ],
        "summary" : false,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityCategoryDto",
    "dtoData" : {
      "code" : "PROJECTS",
      "name" : "Projects"
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityInstanceDto",
    "dtoData" : {
      "code" : "b8bac8d2-d1f5-4aac-8cf5-68224162869f",
      "cetCode" : "MV_TCKTMNG_PROJECT",
      "disabled" : false,
      "customFields" : {
        "customField" : [ {
          "code" : "name",
          "stringValue" : "investigation-core",
          "empty" : false
        }, {
          "code" : "description",
          "empty" : true
        }, {
          "code" : "remoteSpaces",
          "mapValue" : {
            "assembla.com" : {
              "value" : "webdrone-iep-kbstudio",
              "empty" : false
            },
            "github.com" : {
              "value" : "webdrone-fr/investigation-core",
              "empty" : false
            }
          },
          "empty" : true
        } ],
        "inheritedCustomField" : [ ],
        "empty" : false
      }
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.CustomEntityTemplateDto",
    "dtoData" : {
      "code" : "MV_TCKTMNG_PROJECT",
      "name" : "Project",
      "description" : "Project",
      "customEntityCategoryCode" : "PROJECTS",
      "availableStorages" : [ "SQL" ],
      "sqlStorageConfiguration" : {
        "storeAsTable" : true
      },
      "samples" : [ ],
      "audited" : false,
      "fields" : [ {
        "code" : "description",
        "description" : "Description",
        "fieldType" : "LONG_TEXT",
        "accountLevel" : "CE_MV_TCKTMNG_PROJECT",
        "appliesTo" : "CE_MV_TCKTMNG_PROJECT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Project:0;field:2",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "name",
        "description" : "Name",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_PROJECT",
        "appliesTo" : "CE_MV_TCKTMNG_PROJECT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "SINGLE",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Project:0;field:0",
        "identifier" : false,
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      }, {
        "code" : "remoteSpaces",
        "description" : "Remote spaces (domain,name)_",
        "fieldType" : "STRING",
        "accountLevel" : "CE_MV_TCKTMNG_PROJECT",
        "appliesTo" : "CE_MV_TCKTMNG_PROJECT",
        "useInheritedAsDefaultValue" : false,
        "storageType" : "MAP",
        "valueRequired" : false,
        "versionable" : false,
        "triggerEndPeriodEvent" : false,
        "listValues" : { },
        "allowEdit" : true,
        "hideOnNew" : false,
        "maxValue" : 255,
        "contentTypes" : [ ],
        "fileExtensions" : [ ],
        "saveOnExplorer" : false,
        "guiPosition" : "tab:Project:0;field:2",
        "identifier" : false,
        "mapKeyType" : "STRING",
        "storages" : [ "SQL" ],
        "samples" : [ ],
        "summary" : true,
        "audited" : false,
        "persisted" : true,
        "filter" : false,
        "unique" : false,
        "matrixColumns" : [ ]
      } ],
      "actions" : [ {
        "code" : "RETRIEVE_REMOTE_TICKETS",
        "description" : "retreive remote tickets from milestones",
        "appliesTo" : "CE_MV_TCKTMNG_PROJECT",
        "label" : "Retrieve Milestones tickets",
        "script" : "org.meveo.ticket_management.RetrieveRemoteTicketsScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      }, {
        "code" : "RETRIEVE_REMOTE_MILESTONES",
        "description" : "Retrieve remote milestones",
        "appliesTo" : "CE_MV_TCKTMNG_PROJECT",
        "label" : "Retrieve Milestones",
        "script" : "org.meveo.ticket_management.RetrieveRemoteMilestonesScript",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      }, {
        "code" : "CREATE_GITHUB_TICKETS",
        "description" : "Create tickets in github",
        "appliesTo" : "CE_MV_TCKTMNG_PROJECT",
        "label" : "Create Github tickets",
        "script" : "org.meveo.ticket_management.WriteOpenTicketsToGithub",
        "applicableToEntityList" : false,
        "applicableToEntityInstance" : true
      } ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.ticket_management.RetrieveRemoteTicketsScript",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.ticket_management;\r\n\r\nimport java.util.Map;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.meveo.service.script.Script;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.persistence.CEIUtils;\r\n\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_TICKET;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_COMMENT;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_MILESTONE;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_PROJECT;\r\n\r\nimport org.meveo.model.customEntities.CREDENTIAL;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\n\r\nimport com.assembla.State;\r\nimport com.assembla.Ticket;\r\nimport com.assembla.TicketComment;\r\nimport com.assembla.Ticket.Priority;\r\nimport com.assembla.client.AssemblaAPI;\r\nimport com.assembla.client.AssemblaResource;\r\nimport com.assembla.client.PagedIterator;\r\nimport com.assembla.service.TicketRequest;\r\nimport com.assembla.service.TicketRequest.Builder;\r\n\r\npublic class RetrieveRemoteTicketsScript extends Script {\r\n\r\n  private static final Logger log = LoggerFactory.getLogger(RetrieveRemoteTicketsScript.class);\r\n\r\n  private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n  private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n  private CREDENTIAL getCredential(String domain) {\r\n    List<CREDENTIAL> matchingCredentials = crossStorageApi\r\n        .find(repositoryService.findDefaultRepository(), CREDENTIAL.class).by(\"DOMAIN\", domain).getResults();\r\n    if (matchingCredentials.size() > 0) {\r\n      return matchingCredentials.get(0);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private List<MV_TCKTMNG_MILESTONE> getMilestones(String projectUuid) {\r\n    List<MV_TCKTMNG_MILESTONE> matchingMilestones = crossStorageApi\r\n        .find(repositoryService.findDefaultRepository(), MV_TCKTMNG_MILESTONE.class).by(\"project\", projectUuid)\r\n        .getResults();\r\n    return matchingMilestones;\r\n  }\r\n\r\n  public void retrieveAssemblaTicketsForMilestone(AssemblaResource api, MV_TCKTMNG_MILESTONE milestone,\r\n      MV_TCKTMNG_PROJECT project,TicketRequest tr) throws BusinessException {\r\n     PagedIterator<Ticket> pgIt = api.tickets(project.getRemoteSpaces().get(\"assembla.com\"))\r\n        .getByMilestone(milestone.getRemoteId(), tr);\r\n    pgIt.forEach(tickets->{;\r\n    for (Ticket assemblaTicket : tickets) {\r\n      log.debug(\"tickets  {}\", assemblaTicket);\r\n      MV_TCKTMNG_TICKET ticket =new MV_TCKTMNG_TICKET();\r\n      ticket.setMilestone(milestone);\r\n      ticket.setProject(project);\r\n      ticket.setRemoteId(assemblaTicket.getNumber()+\" - \"+assemblaTicket.getId());\r\n      ticket.setTitle(assemblaTicket.getSummary());\r\n      ticket.setDescription(assemblaTicket.getDescription());\r\n      ticket.setCreator(assemblaTicket.getReporterId());\r\n      if(assemblaTicket.getCreatedOn()!=null){\r\n        ticket.setCreatedAt(assemblaTicket.getCreatedOn().toInstant());\r\n      }\r\n      if(assemblaTicket.getCompletedDate()!=null){\r\n        ticket.setClosedAt(assemblaTicket.getCompletedDate().toInstant());\r\n      }\r\n      if(assemblaTicket.getUpdatedAt()!=null){\r\n        ticket.setUpdatedAt(assemblaTicket.getUpdatedAt().toInstant());\r\n      }\r\n      List<String> assignees = new ArrayList<String>();\r\n      assignees.add(assemblaTicket.getAssignedToId());\r\n      ticket.setAssignees(assignees);\r\n      List<String> tags = new ArrayList<String>();\r\n      Priority p= assemblaTicket.getPriority();\r\n      if(p!=null){\r\n        tags.add(p.name());\r\n      }\r\n      List<String> atags=assemblaTicket.getTags();\r\n      if(atags!=null){\r\n        tags.addAll(atags);\r\n      }\r\n      State s = assemblaTicket.getState();\r\n      if(s!=null){\r\n        tags.add(s.name());\r\n      }\r\n      String status = assemblaTicket.getStatus();\r\n      if(status!=null){\r\n        tags.add(status);\r\n      }\r\n      ticket.setTags(tags);\r\n      List<MV_TCKTMNG_COMMENT> comments = new ArrayList<>();\r\n      PagedIterator<TicketComment> pigtcomments = api.ticketComments(project.getRemoteSpaces().get(\"assembla.com\")).getAll(assemblaTicket.getNumber());\r\n      pigtcomments.forEach(assemblaComments -> {\r\n        for(TicketComment assemblaComment:assemblaComments){\r\n          log.debug(\"comment  {}\", assemblaComments);\r\n          MV_TCKTMNG_COMMENT comment = new MV_TCKTMNG_COMMENT();\r\n          if(assemblaComment.getCreatedOn()!=null){\r\n            comment.setCreatedAt(assemblaComment.getCreatedOn().toInstant());\r\n          }\r\n          if(assemblaComment.getComment()!=null && assemblaComment.getComment().length()>0){\r\n            comment.setDescription(assemblaComment.getComment());\r\n            if(assemblaComment.getUpdatedAt()!=null){\r\n              comment.setUpdatedAt(assemblaComment.getUpdatedAt().toInstant());\r\n            }\r\n            comment.setCreator(assemblaComment.getUserId()+\"\");\r\n            comments.add(comment);\r\n          } \r\n        }\r\n      });\r\n      ticket.setComments(comments);\r\n      try {\r\n        crossStorageApi.createOrUpdate(repositoryService.findDefaultRepository(), CEIUtils.pojoToCei(ticket));\r\n      } catch (Exception e) {\r\n        throw new RuntimeException(\"Exception while persisting ticket\", e);\r\n      }\r\n    }\r\n  });\r\n  }\r\n\r\n  public void retrieveAssemblaTickets(MV_TCKTMNG_PROJECT project,String milestoneTitle) throws BusinessException {\r\n    \r\n    CREDENTIAL assemblaCredential = getCredential(\"assembla.com\");\r\n    if (assemblaCredential == null) {\r\n      throw new BusinessException(\r\n          \"cannot find any Credential for assembla.com, please create one with username= api-key and header-value=api-secret.\");\r\n    }\r\n    try {\r\n      AssemblaResource api = AssemblaAPI.create(assemblaCredential.getUSERNAME(), assemblaCredential.getHEADER_VALUE());\r\n      Builder builder= new Builder();\r\n      TicketRequest tr = new TicketRequest(builder.all());\r\n          log.debug(\"retrieveAssemblaTickets for project {}\", project.getName());\r\n          List<MV_TCKTMNG_MILESTONE> milestones = getMilestones(project.getUuid());\r\n          for(MV_TCKTMNG_MILESTONE mstone:milestones){\r\n            if(milestoneTitle==null || milestoneTitle.equals(mstone.getTitle())){\r\n              log.debug(\"retrieveAssemblaTickets for milestone {}\", mstone.getTitle());\r\n              retrieveAssemblaTicketsForMilestone(api,mstone,project,tr);\r\n            }\r\n          }\r\n      } catch (Exception e){\r\n        throw new BusinessException(\"Exception while retrieving assembla tickets\",e);\r\n      }\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String,Object> params)  throws BusinessException {\r\n        CustomEntityInstance cei = (CustomEntityInstance)params.get(\"CONTEXT_ENTITY\");\r\n        if(\"MV_TCKTMNG_PROJECT\".equals(cei.getCetCode())){\r\n        \tMV_TCKTMNG_PROJECT project = CEIUtils.ceiToPojo(cei, MV_TCKTMNG_PROJECT.class);\r\n        \tfor(String domain:project.getRemoteSpaces().keySet()){\r\n          \t\tif(\"assembla.com\".equals(domain)){\r\n            \t\tretrieveAssemblaTickets(project,null);\r\n          \t\t}\r\n        \t}\r\n      \t\tlog.info(\"project:{}\",project);\r\n        } else if(\"MV_TCKTMNG_MILESTONE\".equals(cei.getCetCode())){\r\n          //MV_TCKTMNG_MILESTONE milestone = CEIUtils.ceiToPojo(cei, MV_TCKTMNG_MILESTONE.class);\r\n          String projectUuid = ((CustomEntityInstance)cei.get(\"project\")).getUuid();\r\n          String milestoneTitle = cei.get(\"title\");\r\n          try {\r\n            MV_TCKTMNG_PROJECT project = crossStorageApi.find(repositoryService.findDefaultRepository(),projectUuid, MV_TCKTMNG_PROJECT.class);\r\n            retrieveAssemblaTickets(project,milestoneTitle);\r\n          } catch(EntityDoesNotExistsException e){\r\n        \tthrow new BusinessException(\"Exception while retrieving project\",cei.get(\"project\"));\r\n          }\r\n        }\r\n    }\r\n\r\n\r\n}",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ {
        "groupId" : "com.assembla",
        "artifactId" : "assembla-api",
        "version" : "0.1",
        "coordinates" : "com.assembla:assembla-api:0.1"
      } ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.ticket_management.TicketManagementInstallScript",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.ticket_management;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.Map;\r\n\r\nimport javax.ws.rs.client.Client;\r\nimport javax.ws.rs.client.ClientBuilder;\r\nimport javax.ws.rs.client.WebTarget;\r\nimport javax.ws.rs.core.Response;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.service.config.impl.MavenConfigurationService;\r\nimport org.meveo.service.script.module.ModuleScript;\r\n\r\npublic class TicketManagementInstallScript extends ModuleScript {\r\n    \r\n    static final String REPO_NAME=\"smichea\";\r\n    static final String GROUP_ID=\"com.assembla\";\r\n    static final String ARTIFACT_ID=\"assembla-api\";\r\n    static final String VERSION=\"0.1\";\r\n    static final String CLASSIFIER=\"\";\r\n    static final String FILENAME = \"assembla-api-0.1.jar\";\r\n\r\n    MavenConfigurationService mavenConfigurationService = getCDIBean(MavenConfigurationService.class);\r\n\r\n    protected InputStream  downloadJar(){\r\n        Client client = ClientBuilder.newClient();\r\n        WebTarget webTarget = client.target(\"https://github.com/\"+REPO_NAME+\"/\"+ARTIFACT_ID+\"/releases/download/v\"+VERSION+\"/\"+FILENAME);\r\n        Response response = webTarget.request().get();\r\n        if(response.getStatus()==302){\r\n            String location = response.getHeaderString(\"Location\");\r\n            response = client.target(location).request().get();\r\n        }\r\n        if(response.getStatus()==200){\r\n            InputStream in = response.readEntity(InputStream.class);\r\n            return in;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected void uploadMavenArtifact(InputStream inputStream, File file) throws BusinessException{\r\n\t\ttry {\r\n\t\t\tOutputStream outputStream = new FileOutputStream(file);\r\n\t\t\tint read = 0;\r\n\t\t\tbyte[] data = new byte[1024];\r\n\r\n\t\t\twhile ((read = inputStream.read(data)) != -1) {\r\n\t\t\t\toutputStream.write(data, 0, read);\r\n\t\t\t}\r\n\r\n\t\t\tinputStream.close();\r\n\t\t\toutputStream.flush();\r\n\t\t\toutputStream.close();\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow new BusinessException(\"Error uploading file: \" + FILENAME + \". \" + e.getMessage());\r\n\t\t}\r\n\t}\r\n    \r\n    protected boolean artifactExist(){\r\n        boolean result=false;\r\n        return result;\r\n    }\r\n\r\n    protected void updloadArtifact() throws BusinessException{\r\n        String filePath = mavenConfigurationService.createDirectory(GROUP_ID, ARTIFACT_ID, VERSION, CLASSIFIER);\r\n\t\tfilePath = filePath + File.separator + mavenConfigurationService.buildArtifactName(ARTIFACT_ID, VERSION, CLASSIFIER);\r\n        File file =new File(filePath);\r\n        if(!file.exists()){\r\n            InputStream in = downloadJar();\r\n            uploadMavenArtifact(in,file);\r\n        }\r\n    }\r\n\r\n    public void preInstallModule(Map<String, Object> methodContext) throws BusinessException {\r\n        updloadArtifact();\r\n    }\r\n\r\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\r\n        updloadArtifact();\r\n    }\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "org.meveo.ticket_management.WriteOpenTicketsToGithub",
      "description" : "create existing open tickets in github repository",
      "inputs" : [ ],
      "outputs" : [ ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package org.meveo.ticket_management;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Map.Entry;\r\nimport java.util.stream.Collectors;\r\n\r\nimport org.kohsuke.github.GHIssue;\r\nimport org.kohsuke.github.GHIssueBuilder;\r\nimport org.kohsuke.github.GHIssueState;\r\nimport org.kohsuke.github.GHMilestone;\r\nimport org.kohsuke.github.GHProject;\r\nimport org.kohsuke.github.GHRepository;\r\nimport org.kohsuke.github.GitHub;\r\nimport org.kohsuke.github.GitHubBuilder;\r\nimport org.kohsuke.github.PagedIterable;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.model.customEntities.CREDENTIAL;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_COMMENT;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_MILESTONE;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_PROJECT;\r\nimport org.meveo.model.customEntities.MV_TCKTMNG_TICKET;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class WriteOpenTicketsToGithub extends Script {\r\n    String oauthToken = \"acccd14e50cf230f8d58311dabc25815a73028e8\";\r\n    private static final Logger log = LoggerFactory.getLogger(WriteOpenTicketsToGithub.class);\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\r\n    private CREDENTIAL getCredential(String domain) {\r\n        List<CREDENTIAL> matchingCredentials = crossStorageApi\r\n                .find(repositoryService.findDefaultRepository(), CREDENTIAL.class).by(\"DOMAIN\", domain).getResults();\r\n        if (matchingCredentials.size() > 0) {\r\n            return matchingCredentials.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private List<MV_TCKTMNG_MILESTONE> getMilestones(String projectUuid) {\r\n        List<MV_TCKTMNG_MILESTONE> matchingMilestones = crossStorageApi\r\n                .find(repositoryService.findDefaultRepository(), MV_TCKTMNG_MILESTONE.class).by(\"project\", projectUuid)\r\n                .getResults();\r\n        return matchingMilestones;\r\n    }\r\n\r\n    private List<MV_TCKTMNG_TICKET> getTickets(String milestoneUuid) {\r\n        List<MV_TCKTMNG_TICKET> matchingTickets = crossStorageApi\r\n                .find(repositoryService.findDefaultRepository(), MV_TCKTMNG_TICKET.class).by(\"milestone\", milestoneUuid)\r\n                .getResults();\r\n        return matchingTickets;\r\n    }\r\n\r\n    private MV_TCKTMNG_TICKET reloadTicket(MV_TCKTMNG_TICKET ticket) throws EntityDoesNotExistsException {\r\n        return crossStorageApi.find(repositoryService.findDefaultRepository(),ticket.getUuid(), MV_TCKTMNG_TICKET.class);\r\n    }\r\n\r\n\r\n    private void createGithubTicketsForMilestone(GitHub github, MV_TCKTMNG_MILESTONE milestone,\r\n            MV_TCKTMNG_PROJECT project)  throws BusinessException {\r\n        log.debug(\"createGithubTickets for milestone {}\", milestone.getTitle());\r\n        try {\r\n            //GHProject ghProject = github.getProject(Long.parseLong(project.getRemoteSpaces().get(\"github.com\")));\r\n            GHRepository ghRepository = github.getRepository(project.getRemoteSpaces().get(\"github.com\"));\r\n            GHMilestone ghMilestone = null;\r\n            List<GHMilestone> ghMilestones = ghRepository.listMilestones(GHIssueState.ALL).asList();\r\n            for(GHMilestone gh_milestone:ghMilestones) {\r\n                if(milestone.getTitle().equals(gh_milestone.getTitle())){\r\n                    ghMilestone=gh_milestone;\r\n                    break;\r\n                }\r\n            };\r\n            if(ghMilestone==null){\r\n                ghMilestone = ghRepository.createMilestone(milestone.getTitle(), milestone.getDescription());\r\n            }\r\n            List<MV_TCKTMNG_TICKET> tickets = getTickets(milestone.getUuid());\r\n            Map<MV_TCKTMNG_TICKET,GHIssue>  ticketsToUpdate= new HashMap<>(); \r\n            Map<String,MV_TCKTMNG_TICKET> openTickets= tickets.stream().filter(ticket-> (ticket.getClosedAt()==null)).collect(Collectors.toMap(MV_TCKTMNG_TICKET::getTitle, ticket -> ticket));\r\n            PagedIterable<GHIssue> issues = ghRepository.listIssues(GHIssueState.ALL);\r\n            issues.forEach(issue ->{\r\n                if(openTickets.containsKey(issue.getTitle())){\r\n                    MV_TCKTMNG_TICKET ticket=openTickets.remove(issue.getTitle());\r\n                    //ticketsToUpdate.put(ticket,issue);\r\n                    //log.debug(\"ticket [\"+issue.getTitle()+\"] already exist in github, we just update comments\");\r\n                }\r\n            });\r\n            for(MV_TCKTMNG_TICKET ticket:openTickets.values()){\r\n                ticket = reloadTicket(ticket);\r\n                GHIssueBuilder createIssue = ghRepository.createIssue(ticket.getTitle());\r\n                //TODO: implement assignee mapping\r\n                createIssue.body(ticket.getDescription());\r\n                createIssue.milestone(ghMilestone);\r\n                if(ticket.getTags()!=null){\r\n                  for(String tag:ticket.getTags()){\r\n                      if((!\"open\".equalsIgnoreCase(tag))&&(!\"closed\".equalsIgnoreCase(tag))){\r\n                          createIssue.label(tag);\r\n                      }\r\n                  }\r\n                }\r\n                GHIssue issue = createIssue.create();\r\n                if(ticket.getComments()!=null){\r\n                    ticket = reloadTicket(ticket);\r\n                    log.debug(\"set comments of {}\",issue.getTitle());\r\n                    for(MV_TCKTMNG_COMMENT comment:ticket.getComments()){\r\n                      if(comment.getDescription()!=null && comment.getDescription().length()>0){\r\n                        issue.comment(comment.getDescription());\r\n                      }\r\n                    }\r\n                }\r\n            }\r\n            for(Entry<MV_TCKTMNG_TICKET,GHIssue> entry:ticketsToUpdate.entrySet()){\r\n                MV_TCKTMNG_TICKET ticket=entry.getKey();\r\n                GHIssue issue = entry.getValue();\r\n                log.debug(\"ticket to update {}, comments:{}\",ticket.getTitle(),ticket.getComments());\r\n                if(ticket.getComments()!=null){\r\n                    log.debug(\"update comments of {}\",issue.getTitle());\r\n                    for(MV_TCKTMNG_COMMENT comment:ticket.getComments()){\r\n                        issue.comment(comment.getDescription());\r\n                    }\r\n                }\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            throw new BusinessException(\"project should contain a \\\"github.com\\\" remote space containing the repository name\");\r\n        } catch (IOException e) {\r\n            throw new BusinessException(\"Cannot find project with id :\"+project.getRemoteSpaces().get(\"github.com\"));\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n  }\r\n\r\n  public void createGithubTickets(MV_TCKTMNG_PROJECT project) throws BusinessException {\r\n    log.debug(\"createGithubTickets for project {}\", project.getName());\r\n    CREDENTIAL assemblaCredential = getCredential(\"github.com\");\r\n    if (assemblaCredential == null) {\r\n      throw new BusinessException(\r\n          \"cannot find any Credential for github.com, please create one with token set to your github personal token.\");\r\n    }\r\n    try {\r\n        GitHub github = new GitHubBuilder().withOAuthToken(assemblaCredential.getTOKEN()).build();\r\n        List<MV_TCKTMNG_MILESTONE> milestones = getMilestones(project.getUuid());\r\n        log.debug(\"found {} milestones\",milestones.size());\r\n        for(MV_TCKTMNG_MILESTONE milestone:milestones){\r\n          createGithubTicketsForMilestone(github,milestone,project);\r\n        }\r\n      } catch (Exception e){\r\n        throw new BusinessException(\"Exception while creating github tickets\",e);\r\n      }\r\n    }\r\n\r\n\r\n    @Override\r\n  public void execute(Map<String,Object> params)  throws BusinessException {\r\n      CustomEntityInstance cei = (CustomEntityInstance)params.get(\"CONTEXT_ENTITY\");\r\n      MV_TCKTMNG_PROJECT project = CEIUtils.ceiToPojo(cei, MV_TCKTMNG_PROJECT.class);\r\n      for(String domain:project.getRemoteSpaces().keySet()){\r\n        if(\"github.com\".equals(domain)){\r\n          createGithubTickets(project);\r\n        }\r\n      }\r\n        log.info(\"project:{}\",project);\r\n  }\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ {
        "groupId" : "org.kohsuke",
        "artifactId" : "github-api",
        "version" : "1.122",
        "coordinates" : "org.kohsuke:github-api:1.122"
      } ],
      "importScriptInstances" : [ ]
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.EntityCustomActionDto",
    "dtoData" : {
      "code" : "RETRIEVE_REMOTE_TICKETS",
      "description" : "retreive remote tickets from milestones",
      "appliesTo" : "CE_MV_TCKTMNG_PROJECT",
      "label" : "Retrieve Milestones tickets",
      "script" : "org.meveo.ticket_management.RetrieveRemoteTicketsScript",
      "applicableToEntityList" : false,
      "applicableToEntityInstance" : true
    }
  } ],
  "moduleDependencies" : [ {
    "code" : "CREDENTIALS",
    "description" : "credentials",
    "currentVersion" : "1.0.0"
  } ],
  "moduleFiles" : [ ]
} ]
